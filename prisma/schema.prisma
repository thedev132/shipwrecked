generator client {
  provider = "prisma-client-js"
  output   = "../app/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Registration {
  id             String   @id @default(cuid())
  email          String   @unique
  firstName      String
  lastName       String
  githubUsername String
  birthday       DateTime
  addressL1      String
  addressL2      String
  city           String
  state          String
  country        String
  zipCode        String
}

model User {
  id              String          @id @default(cuid())
  name            String?
  email           String          @unique
  emailVerified   DateTime?
  identityToken   String?
  image           String?
  slack           String?         @unique
  isAdmin         Boolean         @default(false)
  role            UserRole        @default(User)
  hackatimeId     String?         @unique
  status          UserStatus      @default(Unknown)
  createdAt       DateTime        @default(now())
  updatedAt       DateTime        @updatedAt
  accounts        Account[]
  actorAuditLogs  AuditLog[]      @relation("AuditLogActorUser")
  targetAuditLogs AuditLog[]      @relation("AuditLogTargetUser")
  Authenticator   Authenticator[]
  chatMessages    ChatMessage[]
  projects        Project[]
  reviews         Review[]
  sessions        Session[]
  upvotes         Upvote[]
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
}

model Authenticator {
  credentialID         String  @unique
  userId               String
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?
  user                 User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([userId, credentialID])
}

model Project {
  projectID      String                 @unique
  name           String
  description    String
  codeUrl        String
  playableUrl    String
  screenshot     String
  submitted      Boolean                @default(false)
  viral          Boolean                @default(false)
  shipped        Boolean                @default(false)
  in_review      Boolean                @default(false)
  userId         String
  chat_enabled   Boolean                @default(false)
  auditLogs      AuditLog[]
  chatRooms      ChatRoom[]
  hackatimeLinks HackatimeProjectLink[]
  user           User                   @relation(fields: [userId], references: [id])
  reviews        Review[]
  upvotes        Upvote[]

  @@id([projectID, userId])
}

model Review {
  id         String             @id @default(cuid())
  comment    String
  createdAt  DateTime           @default(now())
  reviewType ReviewRequestType?
  projectID  String
  reviewerId String
  project    Project            @relation(fields: [projectID], references: [projectID])
  reviewer   User               @relation(fields: [reviewerId], references: [id])

  @@index([projectID])
  @@index([reviewerId])
}

model AuditLog {
  id           String            @id @default(cuid())
  eventType    AuditLogEventType
  description  String
  createdAt    DateTime          @default(now())
  metadata     Json?
  targetUserId String
  actorUserId  String?
  projectId    String?
  actorUser    User?             @relation("AuditLogActorUser", fields: [actorUserId], references: [id])
  project      Project?          @relation(fields: [projectId], references: [projectID])
  targetUser   User              @relation("AuditLogTargetUser", fields: [targetUserId], references: [id])

  @@index([eventType])
  @@index([createdAt])
  @@index([targetUserId])
  @@index([actorUserId])
  @@index([projectId])
}

model HackatimeProjectLink {
  id            String   @id @default(cuid())
  createdAt     DateTime @default(now())
  projectID     String
  hackatimeName String
  rawHours      Float
  hoursOverride Float?
  project       Project  @relation(fields: [projectID], references: [projectID], onDelete: Cascade)

  @@unique([projectID, hackatimeName])
  @@index([projectID])
}

model Upvote {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  userId    String
  projectID String
  project   Project  @relation(fields: [projectID], references: [projectID], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, projectID])
  @@index([projectID])
  @@index([userId])
}

model ChatRoom {
  id        String        @id @default(cuid())
  name      String        @default("General Discussion")
  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt
  projectID String
  messages  ChatMessage[]
  project   Project       @relation(fields: [projectID], references: [projectID], onDelete: Cascade)

  @@index([projectID])
}

model ChatMessage {
  id        String   @id @default(cuid())
  content   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  userId    String
  roomId    String
  room      ChatRoom @relation(fields: [roomId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([roomId])
  @@index([userId])
  @@index([createdAt])
}

enum UserStatus {
  Unknown
  L1
  L2
  FraudSuspect
}

enum UserRole {
  User
  Reviewer
  Admin
}

enum ReviewRequestType {
  ShippedApproval
  ViralApproval
  HoursApproval
  Other
}

enum AuditLogEventType {
  ProjectCreated
  ProjectSubmittedForReview
  ProjectMarkedShipped
  ProjectMarkedViral
  ProjectReviewCompleted
  UserRoleChanged
  UserVerified
  UserCreated
  ProjectDeleted
  SlackConnected
  OtherEvent
}
